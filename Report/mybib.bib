@article{Classen2013FeaturedTS,
  title={Featured Transition Systems: Foundations for Verifying Variability-Intensive Systems and Their Application to LTL Model Checking},
  author={Andreas Classen and Maxime Cordy and Pierre-Yves Schobbens and Patrick Heymans and Axel Legay and Jean-François Raskin},
  journal={IEEE Transactions on Software Engineering},
  year={2013},
  volume={39},
  pages={1069-1089}
}
@inproceedings{inproceedings,
	author = {Classen, Andreas and Heymans, Patrick and Schobbens, Pierre Yves and Legay, Axel and Raskin, Jean-Pierre},
	year = {2010},
	month = {01},
	pages = {},
	title = {Model Checking Lots of Systems: Efficient Verification of Temporal Properties in Software Product Lines},
	volume = {1},
	journal = {Proceedings - International Conference on Software Engineering},
	doi = {10.1145/1806799.1806850}
}

@Inbook{Bradfield2018,
	author="Bradfield, Julian
	and Walukiewicz, Igor",
	editor="Clarke, Edmund M.
	and Henzinger, Thomas A.
	and Veith, Helmut
	and Bloem, Roderick",
	title="The mu-calculus and Model Checking",
	bookTitle="Handbook of Model Checking",
	year="2018",
	publisher="Springer International Publishing",
	address="Cham",
	pages="871--919",
	abstract="This chapter presents that part of the theory of the $\mu${\$}{\backslash}mu{\$}-calculus that is relevant to the model-checking problem as broadly understood. The $\mu${\$}{\backslash}mu{\$}-calculus is one of the most important logics in model checking. It is a logic with an exceptional balance between expressiveness and algorithmic properties.",
	isbn="978-3-319-10575-8",
	doi="10.1007/978-3-319-10575-8_26",
	url="https://doi.org/10.1007/978-3-319-10575-8_26"
}
@BOOK {Groote,
	author    = "Jan Friso Groote and Mohammad Reza Mousavi",
	title     = "Modeling and Analysis of Communicating Systems",
	publisher = "The MIT Press",
	year      = "2014"
}
@inproceedings{FamBasedModelCheckingWithMCRL2,
	title = "Family-based model checking with mCRL2",
	abstract = "Family-based model checking targets the simultaneous verfication of multiple system variants, a technique to handle feature-based variability that is intrinsic to software product lines (SPLs). We present an approach for family-based verification based on the feature μ-calculus μLf, which combines modalities with feature expressions. This logic is interpreted over featured transition systems, a well-accepted model of SPLs, which allows one to reason over the collective behavior of a number of variants (a family of products). Via an embedding into the modal μ-calculus with data, underpinned by the general-purpose mCRL2 toolset, off-the-shelf tool support for μLf becomes readily available. We illustrate the feasibility of our approach on an SPL benchmark model and show the runtime improvement that family-based model checking with mCRL2 offers with respect to model checking the benchmark product-by-product.",
	author = "{ter Beek}, M.H. and {de Vink}, E.P. and T.A.C. Willemse",
	year = "2017",
	doi = "10.1007/978-3-662-54494-5_23",
	language = "English",
	isbn = "978-3-662-54494-5",
	series = "Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)",
	publisher = "Springer",
	pages = "387--405",
	editor = "M. Huisman and J. Rubin",
	booktitle = "Fundamental Approaches to Software Engineering",
	address = "Germany",
}
@article{STREETT1989249,
	title = "An automata theoretic decision procedure for the propositional mu-calculus",
	journal = "Information and Computation",
	volume = "81",
	number = "3",
	pages = "249 - 264",
	year = "1989",
	issn = "0890-5401",
	doi = "https://doi.org/10.1016/0890-5401(89)90031-X",
	url = "http://www.sciencedirect.com/science/article/pii/089054018990031X",
	author = "Robert S. Streett and E. Allen Emerson",
	abstract = "The propositional mu-calculus is a propositional logic of programs which incorporates a least fixpoint operator and subsumes the propositional dynamic logic of Fischer and Ladner, the infinite looping construct of Streett, and the game logic of Parikh. We give an elementary time decision procedure, using a reduction to the emptiness problem for automata on infinite trees. A small model theorem is obtained as a corollary."
}
@article{FISCHER1979194,
	title = "Propositional dynamic logic of regular programs",
	journal = "Journal of Computer and System Sciences",
	volume = "18",
	number = "2",
	pages = "194 - 211",
	year = "1979",
	issn = "0022-0000",
	doi = "https://doi.org/10.1016/0022-0000(79)90046-1",
	url = "http://www.sciencedirect.com/science/article/pii/0022000079900461",
	author = "Michael J. Fischer and Richard E. Ladner",
	abstract = "We introduce a fundamental propositional logical system based on modal logic for describing correctness, termination and equivalence of programs. We define a formal syntax and semantics for the propositional dynamic logic of regular programs and give several consequences of the definition. Principal conclusions are that deciding satisfiability of length n formulas requires time dn/logn for some d > 1, and that satisfiability can be decided in nondeterministic time cn for some c. We provide applications of the decision procedure to regular expressions, Ianov schemes, and classical systems of modal logic."
}
@article{ZIELONKA1998135,
	title = "Infinite games on finitely coloured graphs with applications to automata on infinite trees",
	journal = "Theoretical Computer Science",
	volume = "200",
	number = "1",
	pages = "135 - 183",
	year = "1998",
	issn = "0304-3975",
	doi = "https://doi.org/10.1016/S0304-3975(98)00009-7",
	url = "http://www.sciencedirect.com/science/article/pii/S0304397598000097",
	author = "Wieslaw Zielonka",
	keywords = "Infinite games, Infinite trees, Rabin complementation lemma",
	abstract = "We examine a class of infinite two-person games on finitely coloured graphs. The main aim is to construct finite memory winning strategies for both players. This problem is motivated by applications to finite automata on infinite trees. A special attention is given to the exact amount of memory needed by the players for their winning strategies. Based on a previous work of Gurevich and Harrington and on subsequent improvements of McNaughton we propose a unique framework that allows to reestablish and to improve various results concerning memoryless strategies due to Emerson and Jutla, Mostowski, Klarlund."
}
@book{BDD_running_time,
	author = {Wegener, I.},
	title = {Branching Programs and Binary Decision Diagrams},
	publisher = {Society for Industrial and Applied Mathematics},
	year = {2000},
	doi = {10.1137/1.9780898719789},
	address = {},
	edition   = {},
	URL = {https://epubs.siam.org/doi/abs/10.1137/1.9780898719789},
	eprint = {https://epubs.siam.org/doi/pdf/10.1137/1.9780898719789}
}
@InProceedings{SolvingPGInPractice,
	author="Friedmann, Oliver
	and Lange, Martin",
	editor="Liu, Zhiming
	and Ravn, Anders P.",
	title="Solving Parity Games in Practice",
	booktitle="Automated Technology for Verification and Analysis",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="182--196",
	abstract="Parity games are 2-player games of perfect information and infinite duration that have important applications in automata theory and decision procedures (validity as well as model checking) for temporal logics. In this paper we investigate practical aspects of solving parity games. The main contribution is a suggestion on how to solve parity games efficiently in practice: we present a generic solver that intertwines optimisations with any of the existing parity game algorithms which is only called on parts of a game that cannot be solved faster by simpler methods. This approach is evaluated empirically on a series of benchmarking games from the aforementioned application domains, showing that using this approach vastly speeds up the solving process. As a side-effect we obtain the surprising observation that Zielonka's recursive algorithm is the best parity game solver in practice.",
	isbn="978-3-642-04761-9"
}

@Inbook{Handbook_BDD_Chapter,
	author="Bryant, Randal E.",
	editor="Clarke, Edmund M.
	and Henzinger, Thomas A.
	and Veith, Helmut
	and Bloem, Roderick",
	title="Binary Decision Diagrams",
	bookTitle="Handbook of Model Checking",
	year="2018",
	publisher="Springer International Publishing",
	address="Cham",
	pages="191--217",
	abstract="Binary decision diagrams provide a data structure for representing and manipulating Boolean functions in symbolic form. They have been especially effective as the algorithmic basis for symbolic model checkers. A binary decision diagram represents a Boolean function as a directed acyclic graph, corresponding to a compressed form of decision tree. Most commonly, an ordering constraint is imposed among the occurrences of decision variables in the graph, yielding ordered binary decision diagrams (OBDD). Representing all functions as OBDDs with a common variable ordering has the advantages that (1) there is a unique, reduced representation of any function, (2) there is a simple algorithm to reduce any OBDD to the unique form for that function, and (3) there is an associated set of algorithms to implement a wide variety of operations on Boolean functions represented as OBDDs. Recent work in this area has focused on generalizations to represent larger classes of functions, as well as on scaling implementations to handle larger and more complex problems.",
	isbn="978-3-319-10575-8",
	doi="10.1007/978-3-319-10575-8_7",
	url="https://doi.org/10.1007/978-3-319-10575-8_7"
}
@techreport{Emerson:1986:MCP:900378,
	author = {Emerson, E. A and Lei, Chin},
	title = {Model Checking in the Propositional Mu-calculus},
	year = {1986},
	source = {http://www.ncstrl.org:8900/ncstrl/servlet/search?formname=detail\&id=oai%3Ancstrlh%3Autexas_cs%3AUTEXAS_CS%2F%2FCS-TR-86-06},
	publisher = {University of Texas at Austin},
	address = {Austin, TX, USA},
} 
@article{WALUKIEWICZ2002311,
	title = "Monadic second-order logic on tree-like structures",
	journal = "Theoretical Computer Science",
	volume = "275",
	number = "1",
	pages = "311 - 346",
	year = "2002",
	issn = "0304-3975",
	doi = "https://doi.org/10.1016/S0304-3975(01)00185-2",
	url = "http://www.sciencedirect.com/science/article/pii/S0304397501001852",
	author = "Igor Walukiewicz",
	keywords = "Monadic second-order logic, Tree automata, Decidability",
	abstract = "An operation M∗ which constructs from a given structure M a tree-like structure whose domain consists of the finite sequences of elements of M is considered. A notion of automata running on such tree-like structures is defined. It is shown that automata of this kind characterise expressive power of monadic second-order logic (MSOL) over tree-like structures. Using this characterisation it is proved that MSOL theory of a tree-like structure is effectively reducible to that of the original structure. As another application of the characterisation it is shown that MSOL on trees of arbitrary degree is equivalent to first-order logic extended with unary least fixpoint operator."
}
@article{FPITE,
	author = {Bruse, Florian and Falk, Michael and Lange, Martin},
	year = {2014},
	month = {08},
	pages = {},
	title = {The Fixpoint-Iteration Algorithm for Parity Games},
	volume = {161},
	journal = {Electronic Proceedings in Theoretical Computer Science},
	doi = {10.4204/EPTCS.161.12}
}
@InProceedings{SolvingInPractice,
	author="Friedmann, Oliver
	and Lange, Martin",
	editor="Liu, Zhiming
	and Ravn, Anders P.",
	title="Solving Parity Games in Practice",
	booktitle="Automated Technology for Verification and Analysis",
	year="2009",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="182--196",
	abstract="Parity games are 2-player games of perfect information and infinite duration that have important applications in automata theory and decision procedures (validity as well as model checking) for temporal logics. In this paper we investigate practical aspects of solving parity games. The main contribution is a suggestion on how to solve parity games efficiently in practice: we present a generic solver that intertwines optimisations with any of the existing parity game algorithms which is only called on parts of a game that cannot be solved faster by simpler methods. This approach is evaluated empirically on a series of benchmarking games from the aforementioned application domains, showing that using this approach vastly speeds up the solving process. As a side-effect we obtain the surprising observation that Zielonka's recursive algorithm is the best parity game solver in practice.",
	isbn="978-3-642-04761-9"
}
@article{tarski1955,
	author = "Tarski, Alfred",
	fjournal = "Pacific Journal of Mathematics",
	journal = "Pacific J. Math.",
	number = "2",
	pages = "285--309",
	publisher = "Pacific Journal of Mathematics, A Non-profit Corporation",
	title = "A lattice-theoretical fixpoint theorem and its applications.",
	url = "https://projecteuclid.org:443/euclid.pjm/1103044538",
	volume = "5",
	year = "1955"
}
@book{birkhoff1940lattice,
	title={Lattice Theory},
	author={Birkhoff, G.},
	number={v. 25,dl. 2},
	isbn={9780821810255},
	lccn={66023707},
	series={American Mathematical Society colloquium publications},
	url={https://books.google.nl/books?id=0Y8d-MdtVwkC},
	year={1940},
	publisher={American Mathematical Society}
}
@inproceedings{Kramer1983CONICAI,
	title={CONIC: an integrated approach to distributed computer control systems},
	author={Jeff Kramer and Jeff Magee and Morris Sloman and Andrew Lister},
	year={1983}
}
@article{PLATH200153,
	title = "Feature integration using a feature construct",
	journal = "Science of Computer Programming",
	volume = "41",
	number = "1",
	pages = "53 - 84",
	year = "2001",
	issn = "0167-6423",
	doi = "https://doi.org/10.1016/S0167-6423(00)00018-6",
	url = "http://www.sciencedirect.com/science/article/pii/S0167642300000186",
	author = "Malte Plath and Mark Ryan",
	keywords = "Features, Feature interaction, Model checking",
	abstract = "A feature is a unit of functionality that may be added to (or omitted from) a system. Examples of features are plug-ins for software packages or additional services offered by telecommunications providers. Many features override the default behaviour of the system, which may lead to unforeseen behaviour of the system; this is known as feature interaction. We propose a feature construct for defining features, and use it to provide a plug-and-play framework for exploring feature interactions. Our approach to the feature interaction problem has the following characteristics: •Features are treated as first-class objects during the development phase.•A method is given for integrating a feature into a system description. It allows features to override existing behaviour of the system being developed.•A prototype tool has been developed for performing the integration.•Interactions between features may be witnessed. In principle, our approach is quite general and need not be tied to any particular system description language. In this paper, however, we develop the approach in the context of the SMV model checking system. We describe two case studies in detail: a lift system and a telephone system."
}
@inproceedings{Friedmann2010ThePC,
	title={The PGSolver Collection of Parity Game Solvers Version 3},
	author={Oliver Friedmann and Martin Lange},
	year={2010}
}
@book{BDDSolvingPG,
	title = "BDD-based parity game solving: a comparison of Zielonka's recursive algorithm, priority promotion and fixpoint iteration",
	author = "L. Sanchez and J.W. Wesselink and T.A.C. Willemse",
	year = "2018",
	language = "English",
	series = "Computer science reports",
	publisher = "Technische Universiteit Eindhoven",
}
@InProceedings{Oink,
	author="van Dijk, Tom",
	editor="Beyer, Dirk
	and Huisman, Marieke",
	title="Oink: An Implementation and Evaluation of Modern Parity Game Solvers",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2018",
	publisher="Springer International Publishing",
	address="Cham",
	pages="291--308",
	abstract="Parity games have important practical applications in formal verification and synthesis, especially to solve the model-checking problem of the modal mu-calculus. They are also interesting from the theory perspective, as they are widely believed to admit a polynomial solution, but so far no such algorithm is known. In recent years, a number of new algorithms and improvements to existing algorithms have been proposed. We implement a new and easy to extend tool Oink, which is a high-performance implementation of modern parity game algorithms. We further present a comprehensive empirical evaluation of modern parity game algorithms and solvers, both on real world benchmarks and randomly generated games. Our experiments show that our new tool Oink outperforms the current state-of-the-art.",
	isbn="978-3-319-89960-2"
}
@article{MCNAUGHTON1993149,
	title = "Infinite games played on finite graphs",
	journal = "Annals of Pure and Applied Logic",
	volume = "65",
	number = "2",
	pages = "149 - 184",
	year = "1993",
	issn = "0168-0072",
	doi = "https://doi.org/10.1016/0168-0072(93)90036-D",
	url = "http://www.sciencedirect.com/science/article/pii/016800729390036D",
	author = "Robert McNaughton",
	abstract = "The concept of an infinite game played on a finite graph is perhaps novel in the context of an rather extensive recent literature in which infinite games are generally played on an infinite game tree. We claim two advantages for our model, which is admittedly more restrictive. First, our games have a more apparent resemblance to ordinary parlor games in spite of their infinite duration. Second, by distinguishing those nodes of the graph that determine the winning and losing of the game (winning-condition nodes), we are able to offer a complexity analysis that is useful in computer science applications."
}
@article{friedmanPG,
	author = {Friedmann, Oliver},
	year = {2011},
	month = {11},
	pages = {},
	title = {Recursive algorithm for parity games requires exponential time},
	volume = {45},
	journal = {RAIRO. Theoretical Informatics and Applications},
	doi = {10.1051/ita/2011124}
}
@article{JURDZINSKI_complexity_1998119,
title = "Deciding the winner in parity games is in UP ∩ co-UP",
journal = "Information Processing Letters",
volume = "68",
number = "3",
pages = "119 - 124",
year = "1998",
issn = "0020-0190",
doi = "https://doi.org/10.1016/S0020-0190(98)00150-1",
url = "http://www.sciencedirect.com/science/article/pii/S0020019098001501",
author = "Marcin Jurdziński",
keywords = "Games on graphs, Computational complexity",
abstract = "We observe that the problem of deciding the winner in mean payoff games is in the complexity class UP ∩ co-UP. We also show a simple reduction from parify games to mean payoff games. From this it follows that deciding the winner in parity games and the modal μ-calculus model checking are in UP ∩ co-UP."
}
@inproceedings{Kant2013PracticalIT,
	title={Practical Improvements to Parity Game Solving},
	author={Gijs Kant},
	year={2013}
}
@INPROCEEDINGS{OnTheNotionOfVariability, 
	author={J. {van Gurp} and J. {Bosch} and M. {Svahnberg}}, 
	booktitle={Proceedings Working IEEE/IFIP Conference on Software Architecture}, 
	title={On the notion of variability in software product lines}, 
	year={2001}, 
	volume={}, 
	number={}, 
	pages={45-54}, 
	keywords={DP industry;software packages;software development management;software product line variability;variability techniques;large industrial software systems;terminology;recurring variability patterns;Software systems;Software engineering;Runtime;Delay effects;Software reusability;Mathematics;Computer science;Computer industry;Software design;Software architecture}, 
	doi={10.1109/WICSA.2001.948406}, 
	ISSN={}, 
	month={Aug},}
@book{ClementsSoftwareProduct2001,
	title = {Software Product Lines: Practices and Patterns},
	author={Paul Clements and Linda Northrop},
	year={2001},
	publisher={Addison-Wesley Professional},
}
@INPROCEEDINGS{CheckingLotsOfSystems, 
	author={A. {Classen} and P. {Heymans} and P. {Schobbens} and A. {Legay} and J. {Raskin}}, 
	booktitle={2010 ACM/IEEE 32nd International Conference on Software Engineering}, 
	title={Model checking lots of systems: efficient verification of temporal properties in software product lines}, 
	year={2010}, 
	volume={1}, 
	number={}, 
	pages={335-344}, 
	keywords={program verification;software engineering;temporal properties;software product lines;product line engineering;formal modelling;formal verification;automated verification;Radio frequency;Semantics;Unified modeling language;Automata;Software;Barium;Space exploration;features;software product lines;specification}, 
	doi={10.1145/1806799.1806850}, 
	ISSN={}, 
	month={May},}
@InProceedings{ModalIOAutomata,
	author="Larsen, Kim G.
	and Nyman, Ulrik
	and Wąsowski, Andrzej",
	editor="De Nicola, Rocco",
	title="Modal I/O Automata for Interface and Product Line Theories",
	booktitle="Programming Languages and Systems",
	year="2007",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="64--79",
	abstract="Alfaro and Henzinger use alternating simulation in a two player game as a refinement for interface automata [1]. We show that interface automata correspond to a subset of modal transition systems of Larsen and Thomsen [2], on which alternating simulation coincides with modal refinement. As a consequence a more expressive interface theory may be built, by a simple generalization from interface automata to modal automata. We define modal I/O automata, an extension of interface automata with modality. Our interface theory that follows can express liveness properties, disallowing trivial implementations of interfaces, a problem that exists for theories build around simulation preorders. In order to further exemplify the usefulness of modal I/O automata, we construct a behavioral variability theory for product line development.",
	isbn="978-3-540-71316-6"
}
@INPROCEEDINGS{ModelCheckingDomainArtifacts, 
	author="{K. {Lauenroth} and K. {Pohl} and S. {Toehning}}", 
	booktitle="{2009 IEEE/ACM International Conference on Automated Software Engineering}", 
	title="{Model Checking of Domain Artifacts in Product Line Engineering}", 
	year="{2009}", 
	volume="{}", 
	number="{}", 
	pages="{269-280}", 
	keywords="{automata theory;formal specification;model checking;domain artifacts;product line engineering;product line variability;domain artifact verification;development artifact verification;single system development;I/O-automata;CTL;Systems engineering and theory;Automotive engineering;Traffic control;Software engineering;Software systems;Formal verification;Rails;Quality assurance;Design engineering;Software testing;Product Line Engineering;Model Checking;Variability;Domain Artifact Verification}", 
	doi="{10.1109/ASE.2009.16}", 
	ISSN="{}",
	month="{Nov}",}
@INPROCEEDINGS{ModalTS1, 
	author={A. {Fantechi} and S. {Gnesi}}, 
	booktitle={2008 12th International Software Product Line Conference}, 
	title={Formal Modeling for Product Families Engineering}, 
	year={2008}, 
	volume={}, 
	number={}, 
	pages={193-202}, 
	keywords={formal logic;software development management;formal modeling;product families engineering;generalized extended modal transition systems;GEMTS;labelled transition systems;temporal logic formulae;Unified modeling language;Proposals;Sugar;Fires;Solid modeling;Software;Pressing;Product Families;Labeled Transition Systems;Variability Modeling}, 
	doi={10.1109/SPLC.2008.45}, 
	ISSN={}, 
	month={Sep.},}
@inproceedings{ModalTS2,
	author = {Fischbein, Dario and Uchitel, Sebastian and Braberman, Victor},
	title = {A Foundation for Behavioural Conformance in Software Product Line Architectures},
	booktitle = {Proceedings of the ISSTA 2006 Workshop on Role of Software Architecture for Testing and Analysis},
	series = {ROSATEA '06},
	year = {2006},
	isbn = {1-59593-459-6},
	location = {Portland, Maine},
	pages = {39--48},
	numpages = {10},
	url = {http://doi.acm.org/10.1145/1147249.1147254},
	doi = {10.1145/1147249.1147254},
	acmid = {1147254},
	publisher = {ACM},
	address = {New York, NY, USA},
} 
@article{ModalTS3,
	title = "Modelling and analysing variability in product families: Model checking of modal transition systems with variability constraints",
	journal = "Journal of Logical and Algebraic Methods in Programming",
	volume = "85",
	number = "2",
	pages = "287 - 315",
	year = "2016",
	issn = "2352-2208",
	doi = "https://doi.org/10.1016/j.jlamp.2015.11.006",
	url = "http://www.sciencedirect.com/science/article/pii/S2352220815001431",
	author = "Maurice H. ter Beek and Alessandro Fantechi and Stefania Gnesi and Franco Mazzanti",
	keywords = "Model checking, Modal transition systems, Temporal logic, Product families, Variability",
	abstract = "We present the formal underpinnings of a modelling and analysis framework for the specification and verification of variability in product families. We address variability at the behavioural level by modelling the family behaviour by means of a Modal Transition System (MTS) with an associated set of variability constraints expressed over action labels. An MTS is a Labelled Transition System (LTS) which distinguishes between optional and mandatory transitions. Steered by the variability constraints, the inclusion or exclusion of labelled transitions in an LTS refining the MTS determines the family's possible product behaviour. We formalise this as a special-purpose refinement relation for MTSs, which differs fundamentally from the classical one, and show how to use it for the definition and derivation of valid product behaviour starting from product family behaviour. We also present a variability-aware action-based branching-time modal temporal logic to express properties over MTSs, and demonstrate a number of results regarding the preservation of logical properties from family to product behaviour. These results pave the way for the more efficient family-based analyses of MTSs, limiting the need for product-by-product analyses of LTSs. Finally, we define a high-level modal process algebra for the specification of MTSs. The complete framework is implemented in a model-checking tool: given the behaviour of a product family modelled as an MTS with an additional set of variability constraints, it allows the explicit generation of valid product behaviour as well as the efficient on-the-fly verification of logical properties over family and product behaviour alike."
}
@book{SPLsFoundationAndTechniques,
	author = {Pohl, Klaus and B\"{o}ckle, G\"{u}nter and Linden, Frank J. van der},
	title = {Software Product Line Engineering: Foundations, Principles and Techniques},
	year = {2005},
	isbn = {3540243720},
	publisher = {Springer-Verlag},
	address = {Berlin, Heidelberg},
} 
@ARTICLE{FTSLTL, 
	author={A. {Classen} and M. {Cordy} and P. {Schobbens} and P. {Heymans} and A. {Legay} and J. {Raskin}}, 
	journal={IEEE Transactions on Software Engineering}, 
	title={Featured Transition Systems: Foundations for Verifying Variability-Intensive Systems and Their Application to LTL Model Checking}, 
	year={2013}, 
	volume={39}, 
	number={8}, 
	pages={1069-1089}, 
	keywords={automata theory;formal logic;formal verification;software quality;featured transition systems;variability-intensive system verification;LTL model checking;software product line engineering;quality assurance techniques;automata-based approach;linear time logic model checking;mathematical model;FTS model checking algorithm;SNIP;model checker;Unified modeling language;Semantics;Software;Labeling;Automata;Quality assurance;Formal methods;model checking;verification;variability;features;software product lines}, 
	doi={10.1109/TSE.2012.86}, 
	ISSN={}, 
	month={Aug},}
@article{LTL,
	title={The temporal logic of programs},
	author={Amir Pnueli},
	journal={18th Annual Symposium on Foundations of Computer Science (sfcs 1977)},
	year={1977},
	pages={46-57}
}
@book{PrinciplesOfModelChecking,
	author = {Baier, Christel and Katoen, Joost-Pieter},
	title = {Principles of Model Checking (Representation and Mind Series)},
	year = {2008},
	isbn = {026202649X, 9780262026499},
	publisher = {The MIT Press},
} 
@INPROCEEDINGS{FTSCTL, 
	author={A. {Classen} and P. {Heymans} and P. {Schobbens} and A. {Legay}}, 
	booktitle={2011 33rd International Conference on Software Engineering (ICSE)}, 
	title={Symbolic model checking of software product lines}, 
	year={2011}, 
	volume={}, 
	number={}, 
	pages={321-330}, 
	keywords={formal logic;product development;program testing;program verification;software reusability;symbolic model checking;software product line;temporal property;featured transition system;SPL behaviour;system verification;symbolic representation;computation tree logic;NuSMV language;tool infrastructure;Encoding;Boolean functions;Computational modeling;Semantics;Rain;Software;Explosions;features;software product lines;specification}, 
	doi={10.1145/1985793.1985838}, 
	ISSN={}, 
	month={May},}
@article{FTSMu,
	title = "Towards a feature mu-calculus targeting SPL verification",
	abstract = "The modal μ-calculus μL is a well-known fixpoint logic to express and model check properties interpreted over labeled transition systems. In this paper, we propose two variants of the μ-calculus, μLf and μL?f, for feature transition systems. For this, we explicitly incorporate feature expressions into the logics, allowing operators to select transitions and behavior restricted to specific products and subfamilies. We provide semantics for μLf and μL?f and relate the two new μ-calculi and μL to each other. Next, we focus on the analysis of SPL behavior and show how our formalism can be applied for product-based verification with μLf as well as family-based verification with μL?f. We illustrate by means of a toy example how properties can be model checked, exploiting an embedding of μL?f into the μ-calculus with data.",
	author = "{Ter Beek}, M.H. and {De Vink}, E.P. and T.A.C. Willemse",
	year = "2016",
	month = "3",
	day = "28",
	doi = "10.4204/EPTCS.206.6",
	language = "English",
	volume = "206",
	pages = "61--75",
	journal = "Electronic Proceedings in Theoretical Computer Science, EPTCS",
	issn = "2075-2180",
	publisher = "Open Publishing Association",
}
@Inbook{MuCalculusSubsumes,
	author="Manolios, Panagiotis",
	editor="Kaufmann, Matt
	and Manolios, Panagiotis
	and Moore, J. Strother",
	title="Mu-Calculus Model-Checking",
	bookTitle="Computer-Aided Reasoning: ACL2 Case Studies",
	year="2000",
	publisher="Springer US",
	address="Boston, MA",
	pages="93--111",
	abstract="Temporal logic model-checking has received substantial academic interest and has enjoyed wide industrial acceptance. Temporal logics are used to describe the behavior (over time) of systems which continuously interact with their environment. Model-checking algorithms are used to decide if a finite-state system satisfies a temporal logic formula. Many temporal logics, e.g., CTL, LTL, and CTL* can be translated into the Mu-Calculus. In addition, the algorithm that decides the Mu-Calculus is used for symbolic (BDD-based) model-checking, a technique that has greatly extended the applicability of model-checking. In this case study we define a model-checker for the Mu-Calculus in ACL2 and show how to translate CTL into the Mu-Calculus.",
	isbn="978-1-4757-3188-0",
	doi="10.1007/978-1-4757-3188-0_7",
	url="https://doi.org/10.1007/978-1-4757-3188-0_7"
}

@inproceedings{LTLusingAutomata,
	author = {Vardi, Moshe and Wolper, Pierre},
	year = {1986},
	month = {01},
	pages = {},
	title = {Automata-Theoretic Approach to Automatic Program Verification},
	journal = {[No source information available]}
}
@Article{NuSMV,
	author="Cimatti, Alessandro
	and Clarke, Edmund
	and Giunchiglia, Fausto
	and Roveri, Marco",
	title="NUSMV: a new symbolic model checker",
	journal="International Journal on Software Tools for Technology Transfer",
	year="2000",
	month="Mar",
	day="01",
	volume="2",
	number="4",
	pages="410--425",
	abstract="This paper describes a new symbolic model checker, called NuSMV, developed as part of a joint project between CMU and IRST. NuSMV is the result of the reengineering, reimplementation and, to a limited extent, extension of the CMU SMV model checker. The core of this paper consists of a detailed description of the NuSMV functionalities, architecture, and implementation.",
	issn="1433-2779",
	doi="10.1007/s100090050046",
	url="https://doi.org/10.1007/s100090050046"
}
@InProceedings{mCRL2Toolset,
	author="Cranen, Sjoerd
	and Groote, Jan Friso
	and Keiren, Jeroen J. A.
	and Stappers, Frank P. M.
	and de Vink, Erik P.
	and Wesselink, Wieger
	and Willemse, Tim A. C.",
	editor="Piterman, Nir
	and Smolka, Scott A.",
	title="An Overview of the mCRL2 Toolset and Its Recent Advances",
	booktitle="Tools and Algorithms for the Construction and Analysis of Systems",
	year="2013",
	publisher="Springer Berlin Heidelberg",
	address="Berlin, Heidelberg",
	pages="199--213",
	abstract="The analysis of complex distributed systems requires dedicated software tools. The mCRL language and toolset have been developed to support such analysis. We highlight changes and improvements made to the toolset in recent years. On the one hand, these affect the scope of application, which has been broadened with extended support for data structures like infinite sets and functions. On the other hand, considerable progress has been made regarding the performance of our tools for state space generation and model checking, due to improvements in symbolic reduction techniques and due to a shift towards parity game-based solving. We also discuss the software architecture of the toolset, which was well suited to accommodate the above changes, and we address a number of case studies to illustrate the approach.",
	isbn="978-3-642-36742-7"
}

